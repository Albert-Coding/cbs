#!/bin/sh

[ -z "${CLUSTER_HOST}" ] && export CLUSTER_HOST="{{hostname}}"
[ -z "${IMAGE_VERSION}" ] && export IMAGE_VERSION="{{version}}"
[ -z "${IMAGE_HOST}" ] && export IMAGE_HOST="${HYDRA_BOOT}"
[ -z "${PROCESSES}" ] && export PROCESSES="{{process}}"
[ -z "${CLUSTER_HOST}" ] && fail "missing CLUSTER_HOST environment variable"
[ -z "${CLUSTER_ID}" ] && fail "missing CLUSTER_ID environment variable"
[ -z "${PROCESSES}" ] && fail "missing PROCESSES environment variable"

# add hydra bin dir to path so processes can inherit
export PATH=${PATH}:${HYDRA_IMAGE}/bin

# create required directories
for dir in bin lib log etc/pid; do
	dir=${HYDRA_IMAGE}/${dir}
	[ ! -d ${dir} ] && mkdir -p ${dir} && echo "created ${dir}"
done

# check for updates to required images
for image in etc/log4j.conf lib/hydra.jar lib/libflcow.dylib lib/libflcow.so web.zip; do
	local=${HYDRA_IMAGE}/${image}
	remote=${IMAGE_HOST}/image/${IMAGE_VERSION}/${image}
	[ ! -f ${local} ] && (
		echo "fetching $image..."
		curl -s ${remote} > ${local} || fail "failed image load '${image}'"
	)
done

# unzip web directory
(
	cd $HYDRA_IMAGE
	[ ! -d web ] && unzip web.zip
)

# install command line helper
HCL=${HYDRA_IMAGE}/bin/hcl
[ ! -f ${HCL}  ] && (
	curl -s "http://${HYDRA_BOOT}/render/hcl?cluster=${CLUSTER_ID}&hostname=${CLUSTER_HOST}" > ${HCL} || fail "failed hcl load"
	chmod +x ${HCL}
)

# launch host local processes
for proc in ${PROCESSES}; do
	echo -n "fetching ${proc} start... "
	bash <(curl -s "http://${HYDRA_BOOT}/render/start-${proc}?cluster=${CLUSTER_ID}&hostname=${CLUSTER_HOST}")
done

