#!/bin/sh

function fail() {
	echo $1
	exit
}

export JAVA=$(which java)

[ -z "${HOSTNAME}" ] && export HOSTNAME="{{hostname}}"
[ -z "${CLUSTERID}" ] && export CLUSTERID="{{cluster}}"
[ -z "${IMAGEVERSION}" ] && export IMAGEVERSION="{{version}}"
[ -z "${PROCESSES}" ] && export PROCESSES="{{process}}"

[ -z "${HOME}" ] && fail "missing HOME environment variable"
[ -z "${HOSTNAME}" ] && fail "missing HOSTNAME environment variable"
[ -z "${CLUSTERID}" ] && fail "missing CLUSTERID environment variable"
[ -z "${PROCESSES}" ] && fail "missing PROCESSES environment variable"
[ -z "${JAVA}" ] && fail "missing java binaries"

[ -z "${HYDRA_IMAGE}" ] && echo "defaulting HYDRA_IMAGE" && export HYDRA_IMAGE=${HOME}/hydra
[ -z "${HYDRA_BOOT}" ] && echo "defaulting HYDRA_BOOT" && export HYDRA_BOOT="http://hydra-boot:8008"

echo "HYDRA_IMAGE=${HYDRA_IMAGE} HYDRA_BOOT=${HYDRA_BOOT}"

# create required directories
for dir in bin lib log etc/pid; do
	dir=${HYDRA_IMAGE}/${dir}
	[ ! -d ${dir} ] && mkdir -p ${dir} && echo "created ${dir}"
done

# check for updates to required images
for image in bin/hcl etc/log4j.conf lib/hydra.jar lib/libflcow.dylib lib/libflcow.so; do
	local=${HYDRA_IMAGE}/${image}
	remote=${HYDRA_BOOT}/image/${IMAGEVERSION}/${image}
	[ ! -f ${local} ] && (
		echo "fetching $image..."
		curl -s ${remote} > ${local} || fail "failed image load '${image}'"
	)
done

for proc in ${PROCESSES}; do
	echo "fetching ${proc} boot..."
	bash <(curl -s "${HYDRA_BOOT}/render/boot-${proc}?&cluster=${CLUSTERID}&hostname=${HOSTNAME}")
done

