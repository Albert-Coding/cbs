#!/bin/sh

{% include "proc-env" %}

function register_node() {
	process=$1
	curl -s "http://${HYDRA_BOOT}/api/register_node?cluster=${CLUSTER_ID}&key=${process}&hostname=${CLUSTER_HOST}"
}

function wait_nodes() {
	process=$1
	curl -s "http://${HYDRA_BOOT}/api/wait_nodes?cluster=${CLUSTER_ID}&key=${process}"
}

function get_broker() {
	export rabbit=$(wait_nodes rabbit)
	echo "-Dbatch.brokerHost=${rabbit} -Dbatch.brokerPort=5672"
}

function get_zookeeper() {
	export zookeeper=$(wait_nodes zookeeper)
	echo "-Dzk.servers=${zookeeper}:2181"
}

function setWorkingDir() {
	cd ${HYDRA_IMAGE}
}

function testIsRunning() {
	PIDFILE=$1
	[ ! -f ${PIDFILE} ] && return 0
	PIDVAL=$(cat ${PIDFILE})
	if [ -d /proc ]; then
		[ -d /proc/${PIDVAL} ] && return 1
	else
		EXIST="$(ps ax | grep -v grep | grep ${PIDVAL})" 
		[ "${EXIST}" != "" ] && return 1
	fi
	return 0
}

function startProcess() {
	export PROCNAME=$1; shift
	cd ${HYDRA_IMAGE}
	PID="${PIDDIR}/pid.${PROCNAME}"
	LOG=log/${PROCNAME}.log
	testIsRunning ${PID}
	running=$?
	if [ ${running} -eq 0 ]; then
		echo "startProcess :: ${PROCNAME}"
		echo $* > ${LOG}
		echo "-----(( ${PROCNAME} ))-----(( $(date) ))-----" >> ${LOG}
		nohup $* >> ${LOG} 2>&1 &
		echo "$!" > "${PID}"
		echo "started ${PROCNAME}"
		return 0
	else
		return 1
	fi
}

function stopProcess() {
	echo "stopProcess :: $*"
	cd ${HYDRA_IMAGE}
	for process in $*; do
		if [ -f ${PIDDIR}/pid.${process} ]; then
			PID=$(cat ${PIDDIR}/pid.${process})
			tries=1
			if [ -d /proc ]; then
				# in linux, use /proc filesystem. yay
				while [ -d /proc/${PID} ]; do
					echo "stopping ${process} #${tries}"
					[ ${tries} -gt 5 ] && SIG="-9"
					kill ${SIG} ${PID} # 2>/dev/null
					[ ${tries} -gt 1 ] && sleep 1 || usleep 250000
					tries=$((tries+1))
				done
			else
				# everywhere else, use ps. booo
				SIG=""
				EXIST="$(ps ax | grep -v grep | grep ${PID})" 
				while [ "$(ps a | grep -v grep | grep ${PID})" != "" ]; do
					echo "stopping ${process} #${tries} @ ${PID}"
					[ ${tries} -gt 5 ] && SIG="-9"
					kill ${SIG} ${PID} 2>/dev/null || break
					[ ${tries} -gt 1 ] && sleep 1 || sleep 1
					tries=$((tries+1))
				done
			fi
			rm ${PIDDIR}/pid.${process}
		fi
	done
}

