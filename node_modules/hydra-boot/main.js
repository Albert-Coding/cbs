(function() {

var uuid = require('node-uuid');
var level = require('levelup');
var http = require('http');
var url = require('url');
var server = null;
var db = null;

var httpHandle = function(req, res) {
    console.log(['request',req.method, req.url]);
    if (!(req.method == 'GET' || req.method == 'POST')) {
        return httpFail(res);
    }
    if (!(req.url.indexOf("/api/") == 0)) {
        return httpFail(res, "unsupported request: "+req.url);
    }
    var purl = url.parse(req.url, true);
    var funcName = purl.pathname.substring(5);
    var func = api[funcName];
    if (typeof func == 'undefined') {
        return httpFail(res, "invalid api endpoing '"+funcName+"'");
    }
    func(purl.query, req.socket.remoteAddress, function(err, resp) {
        if (err) {
            httpFail(err);
        } else {
            res.writeHead(200, {'Content-Type': 'text/plain'});
            res.end(JSON.stringify(resp)+"\n");
        }
    });
};

var httpFail = function(res, msg, code) {
    res.writeHead(code | 404, {'Content-Type': 'text/plain'});
    res.end((typeof msg == "string" ? msg : "unsupported request") + "\n");
};

var key = function (arr) {
    return arr.join('-');
}

var get = function(arr, func) {
    db.get(key(arr), func);
}

var put = function(arr, val, func) {
    db.put(key(arr), val, func);
}

var api = {
    list_clusters : function(query, remote, callback) {
        var keys = [];
        var stream = db.createKeyStream({start:"cluster-"})
            .on('data', function(data) {
                if (!data.indexOf("cluster-") == 0) {
                    callback(null, keys);
                    stream.end();
                } else {
                    keys.push(data.substring(8));
                }
            })
            .on('end', function() {
                callback(null, keys);
            });
    },

    create_cluster : function(query, remote, callback) {
        var id = uuid.v1();
        var key = ['cluster',id];
        get(key, function(err, val) {
            if (err) {
                put(key, {template:query}, function(err) {
                    if (err) {
                        callback("db put fail");
                    } else {
                        callback(null, {cluster:id});
                    }
                });
            } else {
                callback("db key exists");
            }
        });
    },

    get_cluster : function(query, remote, callback) {
        var key = ['cluster',query.id];
        get(key, function(err, val) {
            if (err) {
                callback(err);
            } else {
                callback(null,val);
            }
        });
    },

    delete_cluster : function(query, remote, callback) {
        var keys = [];
        var start = key(['cluster',query.id]);
        var stream = db.createKeyStream({start:start})
            .on('data', function(data) {
                if (!data.indexOf(start) == 0) {
                    callback(null, keys);
                    stream.end();
                } else {
                    keys.push(data);
                    db.del(data);
                }
            })
            .on('end', function() {
                callback(null, keys);
            });
    }
};

var exports = {
    init : function(port) {
        if (server != null) {
            throw "server already initialized"
        }
        server = http.createServer(function (req, res) {
            httpHandle(req, res);
        }).listen(port | 8008);
        db = level('cluster.db', {valueEncoding:"json"});
    }

};

module.exports = exports;

})();